# -*- coding: utf-8 -*-
"""deploy.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CZyQTc2IyYdz1CwlJBO6jXxQ4JTuAJtJ
"""

!pip install --upgrade streamlit pyngrok pandas requests

from google.colab import files
uploaded = files.upload()

import streamlit as st
import pandas as pd
import requests

# CSS for Netflix-style background and fonts
bg_img = '''
<style>
[data-testid="stAppViewContainer"] {
    background-image: url("https://wallpapers.com/images/hd/netflix-background-gs7hjuwvv2g0e9fj.jpg");
    background-size: cover;
}

h1 {
    color: red;
    font-family: Helvetica, Arial, sans-serif;
}

h2, .stMarkdown, .stSelectbox, .stButton>button {
    color: white;
    font-family: Helvetica, Arial, sans-serif;
}

.stButton>button {
    background-color: #e50914;
    color: white;
    border: none;
    border-radius: 4px;
    padding: 10px;
    font-size: 16px;
    font-weight: bold;
    cursor: pointer;
}

.stButton>button:hover {
    background-color: #f40612;
}

label {
    color: white;
}

.stSelectbox {
    color: white;
}


[data-testid="stSelectbox"] label {
    color: white;
}


</style>
'''
st.markdown(bg_img, unsafe_allow_html=True)

def fetch_poster(movie_id):
    response = requests.get('https://api.themoviedb.org/3/movie/{}?api_key=1567e54c5f3a5de2b7d2d7a97e3383c3&language=en-US'.format(movie_id))
    data = response.json()
    return "https://image.tmdb.org/t/p/w500/" + data['poster_path']

def recommend(movie):
    movies_index = df[df['title'] == movie].index[0]
    distances = similar[movies_index]
    movies_list = sorted(list(enumerate(distances)), reverse=True, key=lambda x: x[1])

    recommended_movies = []
    recommended_movie_posters = []
    for i in movies_list[1:6]:
        movie_id = df.iloc[i[0]].movie_id

        recommended_movies.append(df.iloc[i[0]].title)
        # Fetching movie posters from API
        recommended_movie_posters.append(fetch_poster(movie_id))
        colored_titles = [f'<span style="color:white">{title}</span>' for title in recommended_movies]

    return colored_titles, recommended_movie_posters

df = pd.read_pickle('/content/movies.pkl')
similar = pd.read_pickle('/content/similarity.pkl')

st.title("Netflix Movies")
st.write("Welcome to the Netflix Movies!")

select_movie = st.selectbox('Search A Movie', df['title'].values, index=0, key='select_movie', help="Select a movie to get recommendations.")

if st.button('More Like This'):
    names, posters = recommend(select_movie)
    poster_width = 140

    col1, col2, col3, col4, col5 = st.columns(5)
    for i, col in enumerate([col1, col2, col3, col4, col5]):
        with col:
            st.markdown(names[i], unsafe_allow_html=True)  # Render HTML
            st.image(posters[i], width=poster_width)

!streamlit run app.py --server.port 8502 &>/dev/null &